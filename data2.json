[
  {
    "id": "1100",
    "code1": "catch ( IOException e ) { return ; }\n",
    "code2": "catch ( IOException x ) { System . out . println (  \" .................................. \"  ) ; System . out . println (  \"  --> is : \"  + is ) ; System . out . println (  \"  is.hash : \"  + is . hashCode ( ) ) ; System . out . println ( ) ; System . out . println (  \"  e.name : \"  + e . getName ( ) ) ; System . out . println (  \"  e.hash : \"  + e . hashCode ( ) ) ; System . out . println (  \"  e.method : \"  + e . getMethod ( ) ) ; System . out . println (  \"  e.size : \"  + e . getSize ( ) ) ; System . out . println (  \"  e.csize : \"  + e . getCompressedSize ( ) ) ; x . printStackTrace ( ) ; System . out . println (  \" .................................. \"  ) ; System . exit ( 97 ) ; }\n"
  },
  {
    "id": "1101",
    "code1": "catch ( Exception e ) { throw new RuntimeException ( e ) ; }\n",
    "code2": "catch ( CamelExecutionException e ) { Throwable cause = e . getCause ( ) ; assertIsInstanceOf ( IOException . class , cause ) ; assertTrue ( cause . getMessage ( ) . contains (  \" javax.xml.bind.MarshalException \"  ) ) ; assertTrue ( cause . getMessage ( ) . contains (  \" org.xml.sax.SAXParseException \"  ) ) ; assertTrue ( cause . getMessage ( ) . contains (  \" cvc-complex-type.2.4.a \"  ) ) ; }\n"
  },
  {
    "id": "1102",
    "code1": "catch ( InterruptedException e ) { return null ; } catch ( ExecutionException e ) { return null ; }\n",
    "code2": "catch ( InterruptedException e ) { return new Response ( request , new ErrorMessage (  \" ' \"  + execution +  \" ' was interrupted \"  , e ) ) ; } catch ( ExecutionException e ) { log . log ( Level . WARNING ,  \" Exception on executing  \"  + execution +  \"  for  \"  + request , e ) ; return new Response ( request , new ErrorMessage (  \" Error in ' \"  + execution +  \" ' \"  , e ) ) ; } catch ( TimeoutException e ) { return new Response ( request , new ErrorMessage (  \" Error executing ' \"  + execution +  \" ':  \"  +  \"  Chain timed out. \"  ) ) ; }\n"
  },
  {
    "id": "1103",
    "code1": "catch ( Exception e ) { logger . error ( e . getMessage ( ) , e ) ; }\n",
    "code2": "catch ( IOException e ) { logger . warn (  \" Could not find hue bridge automatically.  \"  +  \" Please make sure it is switched on and connected to the same network as openHAB.  \"  +  \" If it permanently fails you may configure the IP address of your hue bridge manually in the openHAB configuration. \"  ) ; }\n"
  },
  {
    "id": "1104",
    "code1": "catch ( SVNClientException e ) { ex = e ; }\n",
    "code2": "catch ( IOException e ) { callback . statusChanged ( ThingStatus . OFFLINE , ThingStatusDetail . COMMUNICATION_ERROR ,  \" Exception occurred sending to Atlona:  \"  + e ) ; }\n"
  },
  {
    "id": "1105",
    "code1": "catch ( Exception e ) { LOG . error ( \" Failed to update <unk> \" , e ) ; }\n",
    "code2": "catch ( Throwable e ) { AddSyncPointEntry addSyncPoint = File . AddSyncPointEntry . newBuilder ( ) . setSyncpointPath ( syncPoint . toString ( ) ) . build ( ) ; apply ( addSyncPoint ) ; recoverFromStopSync ( syncPoint , mountId ) ; }\n"
  },
  {
    "id": "1106",
    "code1": "catch ( final Exception e ) { throw e ; }\n",
    "code2": "catch ( final RuntimeException e ) { throw e ; } catch ( final Exception e ) { throw new SQLException (  \" Borrow prepareCall from pool failed \"  , e ) ; }\n"
  },
  {
    "id": "1107",
    "code1": "catch ( FileNotFoundException e ) { logger . warn ( String . format (  \" Could not load suggestion ranking model at '%s'. Platform might be unsupported by the official XGBoost \"  +  \"  maven package, or model might be missing/corrupted. \"  , modelPath ) , e ) ; return null ; }\n",
    "code2": "catch ( SecurityException e ) { LogUtil . printException (  \" SecurityException \"  , e ) ; } catch ( IllegalArgumentException e ) { LogUtil . printException (  \" IllegalArgumentException \"  , e ) ; } catch ( IllegalAccessException e ) { LogUtil . printException (  \" IllegalAccessException \"  , e ) ; } catch ( NoSuchMethodException e ) { LogUtil . e (  \" NoSuchMethodException \"  , methodName ) ; } catch ( InvocationTargetException e ) { Throwable cause = e . getCause ( ) ; if ( cause instanceof RuntimeException ) { throw ( RuntimeException ) cause ; } else if ( cause instanceof Error ) { throw ( Error ) cause ; } else { throw new RuntimeException (  \" fail to calling method  \"  + methodName ) ; } }\n"
  },
  {
    "id": "1108",
    "code1": "catch ( InterruptedException e ) { Assert . fail ( e . getMessage ( ) ) ; }\n",
    "code2": "catch ( IOException ex ) { Logger . getLogger ( this . getClass ( ) . getName ( ) ) . log ( Level . FINER ,  \"  \"  , ex ) ; showError ( NbBundle . getMessage ( PayaraInstanceProvider . class ,  \" ERR_Failed_cleanup \"  , dirname ) ) ; }\n"
  },
  {
    "id": "1109",
    "code1": "catch ( NumberFormatException nfe ) { vals [ 0 ] = 0 ; }\n",
    "code2": "catch ( IOException e ) { throw new StreamingIOFailure (  \" Error writing record in transaction write id ( \"  + writeId +  \" ) \"  , e ) ; }\n"
  },
  {
    "id": "1110",
    "code1": "catch ( JSONException e ) { message = json ; } catch ( OutOfMemoryError error ) { message =  \" Output omitted because of Object size \"  ; }\n",
    "code2": "catch ( InvalidServerStoreConfigurationException e ) { assertThat (  \" test failed \"  , e . getMessage ( ) . equals ( ERROR_MESSAGE_BASE +  \" storedKeyType existing:  \"  + serverConfiguration . getStoredKeyType ( ) +  \" , desired:  \"  + clientConfiguration . getStoredKeyType ( ) ) , is ( true ) ) ; }\n"
  },
  {
    "id": "1111",
    "code1": "catch ( Exception FORMAT ) { LOG . error ( \" <unk> \" , <unk> ) ; }\n",
    "code2": "catch ( IOException e ) { logger . error (  \" ERROR # disconnect heartbeat connection for address:{} \"  , mysqlConnection . getConnector ( ) . getAddress ( ) , e ) ; }\n"
  },
  {
    "id": "1112",
    "code1": "catch ( Exception e ) { return null ; }\n",
    "code2": "catch ( Exception e ) { LOGGER . log ( Level . SEVERE ,  \" Error while setting up mass import \"  , e ) ; }\n"
  },
  {
    "id": "1113",
    "code1": "catch ( Exception e ) { e . printStackTrace ( ) ; }\n",
    "code2": "catch ( InflateException ie ) { Log . e ( TAG ,  \" Exception while inflating about box:  \"  + ie . getMessage ( ) ) ; return ; }\n"
  },
  {
    "id": "1114",
    "code1": "catch ( NoClassDefFoundError ex ) { throw new IllegalStateException (  \" Could not evaluate condition on  \"  + classOrMethodName +  \"  due to  \"  + ex . getMessage ( ) +  \"  not found. Make sure your own configuration does not rely on  \"  +  \" that class. This can also happen if you are  \"  +  \" @ComponentScanning a springframework package (e.g. if you  \"  +  \" put a @ComponentScan in the default package by mistake) \"  , ex ) ; } catch ( RuntimeException ex ) { throw new IllegalStateException (  \" Error processing condition on  \"  + getName ( metadata ) , ex ) ; }\n",
    "code2": "catch ( MessagingException ex ) { throw new RuntimeException (  \" Error sending mail notification \"  , ex ) ; }\n"
  },
  {
    "id": "1115",
    "code1": "catch ( Exception e ) { LOGGER . debug (  \" Could not parse time attribute for element test \"  , e ) ; }\n",
    "code2": "catch ( Exception e ) { logger . error ( TransformMessages . getMessage ( TransformMessages . FAILED_TO_PARSE_TRANSFORM_STATISTICS_CONFIGURATION , transformId ) , e ) ; resultListener . onFailure ( e ) ; }\n"
  },
  {
    "id": "1116",
    "code1": "catch ( Exception e ) { return null ; }\n",
    "code2": "catch ( Exception ex ) { throw new SerializationException (  \" Cannot serialize \"  , ex ) ; }\n"
  },
  {
    "id": "1117",
    "code1": "catch ( BuildFileParseException e ) { params . getBuckEventBus ( ) . post ( ConsoleEvent . severe ( MoreExceptions . getHumanReadableOrLocalizedMessage ( e ) ) ) ; return ExitCode . PARSE_ERROR ; }\n",
    "code2": "catch ( InterruptedException e ) { throw new TestBug ( UNEXPECTED_STRING + e ) ; }\n"
  },
  {
    "id": "1118",
    "code1": "catch ( Exception e ) { e . printStackTrace ( ) ; }\n",
    "code2": "catch ( Exception e ) { LOG . error (  \" Error deleting lock file at {} \"  , lockFile . getAbsolutePath ( ) , e ) ; }\n"
  },
  {
    "id": "1119",
    "code1": "catch ( Exception e ) { Cat . logError ( connection , e ) ; }\n",
    "code2": "catch ( Exception e ) { throw new InstantiationException (  \" Unable to instantiate class [ \"  + clazz . getName ( ) +  \" ] \"  , e ) ; }\n"
  },
  {
    "id": "1120",
    "code1": "catch ( IOException e ) { throw new RuntimeException ( e ) ; }\n",
    "code2": "catch ( Exception e ) { logger . error (  \" error in CalculateStatsFromBaseCuboidJob \"  , e ) ; printUsage ( options ) ; throw e ; }\n"
  },
  {
    "id": "1121",
    "code1": "catch ( Exception e ) { ; }\n",
    "code2": "catch ( Exception e ) { e . printStackTrace ( ) ; mException = e ; }\n"
  },
  {
    "id": "1122",
    "code1": "catch ( IOException ex ) { Exceptions . printStackTrace ( ex ) ; }\n",
    "code2": "catch ( InterruptedException ex ) { Logger . getLogger ( Clusterize . class . getName ( ) ) . log ( Level . FINE , null , ex ) ; }\n"
  },
  {
    "id": "1123",
    "code1": "catch ( IOException e ) { throw new IOException ( e ) ; }\n",
    "code2": "catch ( MessagingException e ) { Timber . e ( e ,  \" MessagingException while writing message to crypto provider \"  ) ; }\n"
  },
  {
    "id": "1124",
    "code1": "catch ( IOException e ) { throw new RuntimeException ( e ) ; }\n",
    "code2": "catch ( IOException e ) { System . err . println ( lookup (  \" main.err.prop.cantread \"  , inFile . toString ( ) ) ) ; }\n"
  },
  {
    "id": "1125",
    "code1": "catch ( IOException ioe ) { if ( ioe . getMessage ( ) . equals ( \" Column \" ) ) { return ; } else { throw re ; } }\n",
    "code2": "catch ( UnknownTypeException e ) { Logger . getLogger ( TreeModelNode . class . getName ( ) ) . log ( Level . CONFIG ,  \" Column id: \"  + columnModel . getID ( ) +  \" \\nModel:  \"  + model , e ) ; }\n"
  },
  {
    "id": "1126",
    "code1": "catch ( Throwable e ) { if ( LOGR ) { LogRelease . e ( PLUGIN_TAG , \" <unk> \" + e . getMessage ( ) , e ) ; } }\n",
    "code2": "catch ( Throwable e ) { RuntimeException e_ = Operators . onNextPollError ( v , e , currentContext ( ) ) ; Operators . onDiscard ( v , this . ctx ) ; if ( e_ != null ) { throw e_ ; } }\n"
  },
  {
    "id": "1127",
    "code1": "catch ( AssertionError fail ) { threadRecordFailure ( fail ) ; throw fail ; } catch ( Throwable fail ) { threadUnexpectedException ( fail ) ; }\n",
    "code2": "catch ( Exception e ) { log . error (  \" getCityByIpAddr={} \"  , e . getMessage ( ) , e ) ; }\n"
  },
  {
    "id": "1128",
    "code1": "catch ( IOException e ) { e . printStackTrace ( ) ; }\n",
    "code2": "catch ( InterruptedException e ) { logger . error (  \" Failed to reload {} \"  , getUrn ( ) , e ) ; }\n"
  },
  {
    "id": "1129",
    "code1": "catch ( Exception e ) { e . printStackTrace ( ) ; }\n",
    "code2": "catch ( ParserConfigurationException | SAXException | IOException e ) { return false ; }\n"
  },
  {
    "id": "1130",
    "code1": "catch ( Exception e ) { throw new IllegalArgumentException (  \" Unable to instantiate serializer:  \"  + serializerName +  \"  on sink:  \"  + getName ( ) , e ) ; }\n",
    "code2": "catch ( final Exception ex ) { RegExceptionHandler . handleException ( ex ) ; return null ; }\n"
  },
  {
    "id": "1131",
    "code1": "catch ( Throwable t ) { unexpected ( t ) ; throw new Error ( t ) ; }\n",
    "code2": "catch ( java . sql . SQLException sqle ) { sqle . printStackTrace ( ) ; throw new GenOrmException ( sqle ) ; }\n"
  },
  {
    "id": "1132",
    "code1": "catch ( java . text . ParseException e ) { e . printStackTrace ( ) ; }\n",
    "code2": "catch ( ParseException e ) { AnalysisContext . logError (  \" unable to parse date  \"  + releaseDate , e ) ; return null ; }\n"
  },
  {
    "id": "1133",
    "code1": "catch ( Throwable ex ) { return true ; }\n",
    "code2": "catch ( IOException x ) { x . printStackTrace ( ) ; }\n"
  },
  {
    "id": "1134",
    "code1": "catch ( TagApiException e ) { throw new OverdueApiException ( e ) ; }\n",
    "code2": "catch ( final TagApiException e ) { if ( e . getCode ( ) != ErrorCode . TAG_DOES_NOT_EXIST . getCode ( ) ) { throw new OverdueApiException ( e ) ; } }\n"
  },
  {
    "id": "1135",
    "code1": "catch ( Exception ex ) { ex . printStackTrace ( ) ; }\n",
    "code2": "catch ( java . io . IOException e ) { debug_println (  \"  isPostscript, e=  \"  + e ) ; }\n"
  },
  {
    "id": "1136",
    "code1": "catch ( Exception e ) { throw new ExecutionSetupException ( e ) ; }\n",
    "code2": "catch ( Exception e ) { throw new ExecutionSetupException (  \" Failed to get o.a.hadoop.mapred.RecordReader from Hive InputFormat \"  , e ) ; }\n"
  },
  {
    "id": "1137",
    "code1": "catch ( CertificateException e ) { e . printStackTrace ( ) ; return null ; }\n",
    "code2": "catch ( Exception e ) { throw new RuntimeException (  \" Exception reading X509 from PEM file \"  , e ) ; }\n"
  },
  {
    "id": "1138",
    "code1": "catch ( TransactionException e ) { context . rollbackTransaction ( ) ; }\n",
    "code2": "catch ( DOMException ex ) { success = ( ex . code == DOMException . HIERARCHY_REQUEST_ERR ) ; }\n"
  },
  {
    "id": "1139",
    "code1": "catch ( FileNotFoundException e ) { throw new IllegalArgumentException (  \" Reference file not found:  \"  + file ) ; }\n",
    "code2": "catch ( Throwable th ) { throw new RuntimeException ( th ) ; }\n"
  },
  {
    "id": "1140",
    "code1": "catch ( Exception ex ) { throw new RuntimeException ( \" Should not have been in json. \" , ex ) ; }\n",
    "code2": "catch ( Exception e ) { LOGGER . error ( String . format (  \" Failed to resolve '%s' into class \"  , type ) , e ) ; }\n"
  },
  {
    "id": "1141",
    "code1": "catch ( RuntimeException | Error e ) { throw e ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; }\n",
    "code2": "catch ( IOException e ) { LOGGER . log ( Level . SEVERE ,  \" Failure to roll back transaction \"  , e ) ; }\n"
  },
  {
    "id": "1142",
    "code1": "catch ( Exception e ) { Logger . println (  \" A141 \"  , 10 ,  \" HostPerfProcess10s \"  , e ) ; }\n",
    "code2": "catch ( CoderException e ) { throw new RuntimeException ( e ) ; }\n"
  },
  {
    "id": "1143",
    "code1": "catch ( Exception e ) { <unk> = true ; }\n",
    "code2": "catch ( ZLNetworkException e ) { myError = e . getMessage ( ) ; }\n"
  },
  {
    "id": "1144",
    "code1": "catch ( JMException e ) { logger . error ( \" Failed to unregister because the MBeanRegistrationException \" , e ) ; }\n",
    "code2": "catch ( Exception e ) { throw new CacheException (  \" Error unregistering object instance  \"  + registeredObjectName +  \"  . Error was  \"  + e . getMessage ( ) , e ) ; }\n"
  },
  {
    "id": "1145",
    "code1": "catch ( IOException ioe ) { System . out . println ( ioe . toString ( ) ) ; }\n",
    "code2": "catch ( Exception x ) { LOG . finest (  \" Failed to close log properly:  \"  + x ) ; }\n"
  },
  {
    "id": "1146",
    "code1": "catch ( Throwable e ) { sb . append ( e . toString ( ) ) ; }\n",
    "code2": "catch ( JSONException e ) { throw new RuntimeException ( e ) ; }\n"
  },
  {
    "id": "1147",
    "code1": "catch ( ExecutionException e ) { assertTrue ( e . getCause ( ) instanceof IndeterminateOperationStateException ) ; }\n",
    "code2": "catch ( final java . io . UnsupportedEncodingException ex ) { throw new RuntimeException ( ex ) ; }\n"
  },
  {
    "id": "1148",
    "code1": "catch ( KettleException ke ) { new ErrorDialog ( shell , BaseMessages . getString ( PKG , \" <unk> \" ) , BaseMessages . getString ( PKG , \" <unk> \" ) , ke ) ; }\n",
    "code2": "catch ( KettleException ke ) { new ErrorDialog ( shell , BaseMessages . getString ( PKG ,  \" ElasticSearchBulkDialog.FailedToGetFields.DialogTitle \"  ) , BaseMessages . getString ( PKG ,  \" ElasticSearchBulkDialog.FailedToGetFields.DialogMessage \"  ) , ke ) ; return new String [ 0 ] ; }\n"
  },
  {
    "id": "1149",
    "code1": "catch ( JFRPropertyNotAvailableException e ) { <unk> = \" <unk> \" ; }\n",
    "code2": "catch ( JFRPropertyNotAvailableException e ) { memInfo =  \" <nobr><b>Memory:</b> &lt;not available&gt;</nbsp> \"  ; }\n"
  },
  {
    "id": "1150",
    "code1": "catch ( WMIException e ) { throw new DBException ( e , getDataSource ( ) ) ; }\n",
    "code2": "catch ( IOException e ) { throw new SlimCommunicationException (  \" Could not send/receive data with SUT \"  , e ) ; }\n"
  },
  {
    "id": "1151",
    "code1": "catch ( ExchangeException e ) { System . out . println ( e . getMessage ( ) ) ; }\n",
    "code2": "catch ( InterruptedException e ) { throw new Failure ( e ) ; }\n"
  },
  {
    "id": "1152",
    "code1": "catch ( FileNotFoundException e ) { continue ; }\n",
    "code2": "catch ( FileNotFoundException e ) { continue ; } catch ( InternalError e ) { continue ; }\n"
  },
  {
    "id": "1153",
    "code1": "catch ( KeeperException . NoNodeException e ) { return Collections . emptySet ( ) ; }\n",
    "code2": "catch ( Exception e ) { logger . error (  \" get all tasks from tasks queue exception \"  , e ) ; }\n"
  },
  {
    "id": "1154",
    "code1": "catch ( Exception e ) { log . error ( e . getMessage ( ) , e ) ; }\n",
    "code2": "catch ( CharacterCodingException e ) { throw new RuntimeException ( e ) ; }\n"
  },
  {
    "id": "1155",
    "code1": "catch ( Exception ex ) { ex . printStackTrace ( ) ; }\n",
    "code2": "catch ( NoSuchAlgorithmException nsae ) { continue ; }\n"
  },
  {
    "id": "1156",
    "code1": "catch ( NullPointerException e ) { LogDelegate . e ( \" <unk> \" ) ; }\n",
    "code2": "catch ( NumberFormatException e ) { LogDelegate . e (  \" Category with not-numeric value! \"  , e ) ; }\n"
  },
  {
    "id": "1157",
    "code1": "catch ( Exception e ) { return FutureUtils . completedExceptionally ( new FlinkException ( \" Could not fetch job \" + jobId ) , e ) ; }\n",
    "code2": "catch ( UnknownKvStateLocation | FlinkJobNotFoundException e ) { log . info (  \" Error while request key-value state location \"  , e ) ; return FutureUtils . completedExceptionally ( e ) ; }\n"
  },
  {
    "id": "1158",
    "code1": "catch ( FlowableException e ) { Assert . assertTrue ( e . getMessage ( ) . contains ( \" resultVariable \" ) ) ; }\n",
    "code2": "catch ( ProcessEngineException e ) { testRule . assertTextPresent (  \" form field must have a 'type' attribute \"  , e . getMessage ( ) ) ; }\n"
  },
  {
    "id": "1159",
    "code1": "catch ( SystemException e ) { throw new TransactionException ( \" Unable to get transaction \" , e ) ; }\n",
    "code2": "catch ( Exception e ) { throw new RuntimeException ( e ) ; }\n"
  },
  {
    "id": "1160",
    "code1": "catch ( Exception e ) { LOG . warn ( \" Cannot shut down node \" , e ) ; }\n",
    "code2": "catch ( Throwable t ) { LOG . warn (  \" Cannot shut down Queryable State Data Server. \"  , t ) ; }\n"
  },
  {
    "id": "1161",
    "code1": "catch ( RemoteException e ) { return false ; }\n",
    "code2": "catch ( RemoteException e ) { Log . e ( TAG ,  \"  \"  , e ) ; }\n"
  },
  {
    "id": "1162",
    "code1": "catch ( Exception ex ) { fail ( ex . getMessage ( ) ) ; }\n",
    "code2": "catch ( Exception e ) { System . out . print (  \"  \"  ) ; }\n"
  },
  {
    "id": "1163",
    "code1": "catch ( Exception expected ) { assertThat ( expected . getMessage ( ) ) . contains ( \" <unk> \" ) ; }\n",
    "code2": "catch ( Exception e ) { assertThat ( e . getMessage ( ) , containsString (  \" Environment with name 'FOO' already exists. \"  ) ) ; }\n"
  },
  {
    "id": "1164",
    "code1": "catch ( Exception e ) { log . error ( \" Error while closing {} \" , e . getMessage ( ) , e ) ; }\n",
    "code2": "catch ( BrokerServiceException e ) { log . warn (  \" Consumer {} was already closed: {} \"  , this , e . getMessage ( ) , e ) ; }\n"
  },
  {
    "id": "1165",
    "code1": "catch ( Exception e ) { setEnabled ( false ) ; }\n",
    "code2": "catch ( SalesforceException e ) { ex = e ; }\n"
  },
  {
    "id": "1166",
    "code1": "catch ( ConnectTimeoutException e ) { result = \" \" ; Logs . e ( \" HttpPost overtime: \" + \" \" ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; Logs . e ( e , \" \" ) ; result = \" \" ; }\n",
    "code2": "catch ( ConnectTimeoutException e ) { result =  \" over_time \"  ; Logs . e (  \" HttpPost\u65b9\u5f0f\u8bf7\u6c42\u5931\u8d25:  \"  +  \" \u64cd\u4f5c\u8d85\u65f6 \"  ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; Logs . e ( e . getMessage ( ) ) ; Logs . e ( e . getMessage ( ) ,  \"  \"  ) ; result =  \" over_time \"  ; }\n"
  },
  {
    "id": "1167",
    "code1": "catch ( Exception e ) { fail ( \" failed in <unk> \" , e ) ; }\n",
    "code2": "catch ( Exception e ) { fail (  \" Put in Server has some fight \"  , e ) ; }\n"
  },
  {
    "id": "1168",
    "code1": "catch ( IllegalArgumentException iae ) { return null ; }\n",
    "code2": "catch ( UnsupportedOperationException uoe ) { return null ; }\n"
  },
  {
    "id": "1169",
    "code1": "catch ( IllegalArgumentException e ) { fail ( \" Should not happen \" ) ; }\n",
    "code2": "catch ( IllegalArgumentException e ) { assertNull ( set . floor ( query ) ) ; }\n"
  },
  {
    "id": "1170",
    "code1": "catch ( MongoCommandException e ) { callback . onResult ( null , e ) ; }\n",
    "code2": "catch ( Throwable t ) { callback . onResult ( null , t ) ; }\n"
  },
  {
    "id": "1171",
    "code1": "catch ( ExecutionException e ) { throw new SchemaRegistryStoreException ( \" Failed to get key \" , e ) ; }\n",
    "code2": "catch ( StoreException e ) { throw new SchemaRegistryStoreException (  \" Error from the backend Kafka store \"  , e ) ; }\n"
  },
  {
    "id": "1172",
    "code1": "catch ( OpenDataException e ) { throw Util . newException ( e ) ; }\n",
    "code2": "catch ( IgniteCheckedException e ) { throw U . convertException ( e ) ; }\n"
  },
  {
    "id": "1173",
    "code1": "catch ( FileNotFoundException ex ) { return false ; }\n",
    "code2": "catch ( FileNotFoundException exc ) { mapping = null ; }\n"
  },
  {
    "id": "1174",
    "code1": "catch ( final IllegalArgumentException e ) { return false ; }\n",
    "code2": "catch ( IllegalArgumentException e ) { parsedVal = null ; }\n"
  },
  {
    "id": "1175",
    "code1": "catch ( URISyntaxException e ) { throw new RuntimeException ( e ) ; }\n",
    "code2": "catch ( URISyntaxException e ) { throw new GiveUpLinkRetargetingException ( e ) ; }\n"
  },
  {
    "id": "1176",
    "code1": "catch ( Throwable ex ) { return Observable . error ( ex ) ; }\n",
    "code2": "catch ( Exception e ) { return Observable . error ( e ) ; }\n"
  },
  {
    "id": "1177",
    "code1": "catch ( InterruptedException e ) { e . printStackTrace ( ) ; }\n",
    "code2": "catch ( Exception e ) { e . printStackTrace ( ) ; }\n"
  },
  {
    "id": "1178",
    "code1": "catch ( Throwable fail ) { threadUnexpectedException ( fail ) ; }\n",
    "code2": "catch ( Throwable t ) { threadUnexpectedException ( t ) ; }\n"
  },
  {
    "id": "1179",
    "code1": "catch ( Exception e ) { throw new FlowableException ( \" Error retrieving idm engine info \" , e ) ; }\n",
    "code2": "catch ( Exception e ) { throw new FlowableException (  \" Error retrieving process info \"  , e ) ; }\n"
  },
  {
    "id": "1180",
    "code1": "catch ( XPathExpressionException e ) { throw new RuntimeException ( e ) ; }\n",
    "code2": "catch ( XPathExpressionException e ) { throw new GroovyRuntimeException ( e ) ; }\n"
  },
  {
    "id": "1181",
    "code1": "catch ( IOException e ) { if ( Log . isLoggable ( TAG , Log . WARN ) ) { Log . w ( TAG , \" Could not reset input stream \" , e ) ; } }\n",
    "code2": "catch ( IOException e ) { if ( Log . isLoggable ( TAG , Log . WARN ) ) { Log . w ( TAG ,  \" Cannot reset the input stream \"  , e ) ; } }\n"
  },
  {
    "id": "1182",
    "code1": "catch ( IOException e ) { e . printStackTrace ( ) ; }\n",
    "code2": "catch ( Exception e ) { e . printStackTrace ( ) ; }\n"
  },
  {
    "id": "1183",
    "code1": "catch ( IllegalArgumentException ex ) { return ; }\n",
    "code2": "catch ( IllegalArgumentException e ) { return ; }\n"
  },
  {
    "id": "1184",
    "code1": "catch ( Exception ex ) { Assert . fail ( \" While starting CacheServer \" , ex ) ; }\n",
    "code2": "catch ( Exception ex ) { Assert . fail (  \" While starting CacheServer \"  , ex ) ; }\n"
  },
  {
    "id": "1185",
    "code1": "catch ( Exception ex ) { throw new LocalServiceBindingException ( \" Allowed value range provider can't be instantiated: \" + getName ( ) , ex ) ; }\n",
    "code2": "catch ( Exception ex ) { throw new LocalServiceBindingException (  \" Allowed value range provider can't be instantiated:  \"  + getName ( ) , ex ) ; }\n"
  },
  {
    "id": "1186",
    "code1": "catch ( Exception e ) { throw new ISE ( \" Cannot coerce[%s] to %s \" , value . getClass ( ) . getName ( ) , sqlType ) ; }\n",
    "code2": "catch ( Exception e ) { throw new ISE (  \" Cannot coerce[%s] to %s \"  , value . getClass ( ) . getName ( ) , sqlType ) ; }\n"
  },
  {
    "id": "1187",
    "code1": "catch ( Exception e ) { ProfilerLogger . log ( e ) ; }\n",
    "code2": "catch ( Exception e ) { ProfilerLogger . log ( e ) ; }\n"
  },
  {
    "id": "1188",
    "code1": "catch ( Exception e ) { e . printStackTrace ( ) ; }\n",
    "code2": "catch ( Exception e ) { e . printStackTrace ( ) ; }\n"
  },
  {
    "id": "1189",
    "code1": "catch ( Exception e ) { e . printStackTrace ( ) ; }\n",
    "code2": "catch ( Exception e ) { e . printStackTrace ( ) ; }\n"
  },
  {
    "id": "1190",
    "code1": "catch ( SQLException e ) { throw new RuntimeException ( e ) ; }\n",
    "code2": "catch ( SQLException e ) { throw new RuntimeException ( e ) ; }\n"
  },
  {
    "id": "1191",
    "code1": "catch ( JSONException e ) { fail ( ) ; }\n",
    "code2": "catch ( JSONException e ) { fail ( ) ; }\n"
  },
  {
    "id": "1192",
    "code1": "catch ( Exception e ) { e . printStackTrace ( ) ; }\n",
    "code2": "catch ( Exception e ) { e . printStackTrace ( ) ; }\n"
  },
  {
    "id": "1193",
    "code1": "catch ( IOException e ) { throw new AssertionError ( e ) ; }\n",
    "code2": "catch ( IOException e ) { throw new AssertionError ( e ) ; }\n"
  },
  {
    "id": "1194",
    "code1": "catch ( BiboxException e ) { throw new ExchangeException ( e . getMessage ( ) ) ; }\n",
    "code2": "catch ( BiboxException e ) { throw new ExchangeException ( e . getMessage ( ) ) ; }\n"
  },
  {
    "id": "1195",
    "code1": "catch ( IOException e ) { throw new RuntimeException ( e ) ; }\n",
    "code2": "catch ( IOException e ) { throw new RuntimeException ( e ) ; }\n"
  },
  {
    "id": "1196",
    "code1": "catch ( IOException e ) { throw new RuntimeException ( e ) ; }\n",
    "code2": "catch ( IOException e ) { throw new RuntimeException ( e ) ; }\n"
  },
  {
    "id": "1197",
    "code1": "catch ( InterruptedException e ) { setFailed ( ) ; e . printStackTrace ( ) ; }\n",
    "code2": "catch ( InterruptedException e ) { setFailed ( ) ; e . printStackTrace ( ) ; }\n"
  },
  {
    "id": "1198",
    "code1": "catch ( Exception ex ) { ex . printStackTrace ( ) ; System . err . println ( ex . getMessage ( ) ) ; }\n",
    "code2": "catch ( Exception ex ) { ex . printStackTrace ( ) ; System . err . println ( ex . getMessage ( ) ) ; }\n"
  },
  {
    "id": "1199",
    "code1": "catch ( final IllegalAccessException e ) { throw new LookupException ( e ) ; }\n",
    "code2": "catch ( final IllegalAccessException e ) { throw new LookupException ( e ) ; }\n"
  },
  {
    "id": "2100",
    "code1": "public void setTagger(PersonIdent taggerIdent) {tagger = taggerIdent;}\n",
    "code2": "public static BufferSize automatic() {Runtime rt = Runtime.getRuntime();final long max = rt.maxMemory(); final long total = rt.totalMemory(); final long free = rt.freeMemory(); final long totalAvailableBytes = max - total + free;long sortBufferByteSize = free/2;final long minBufferSizeBytes = MIN_BUFFER_SIZE_MB*MB;if (sortBufferByteSize <  minBufferSizeBytes|| totalAvailableBytes > 10 * minBufferSizeBytes) { if (totalAvailableBytes/2 > minBufferSizeBytes) { sortBufferByteSize = totalAvailableBytes/2; } else {sortBufferByteSize = Math.max(ABSOLUTE_MIN_SORT_BUFFER_SIZE, sortBufferByteSize);}}return new BufferSize(Math.min((long)Integer.MAX_VALUE, sortBufferByteSize));}\n"
  },
  {
    "id": "2101",
    "code1": "public TurkishLowerCaseFilter(TokenStream in) {super(in);}\n",
    "code2": "public ParseTreeMatch match(ParseTree tree, ParseTreePattern pattern) {MultiMap<String, ParseTree> labels = new MultiMap<String, ParseTree>();ParseTree mismatchedNode = matchImpl(tree, pattern.getPatternTree(), labels);return new ParseTreeMatch(tree, pattern, labels, mismatchedNode);}\n"
  },
  {
    "id": "2102",
    "code1": "public SrndQuery getSubQuery(int qn) {return queries.get(qn);}\n",
    "code2": "public float currentScore(int docId, String field, int start, int end, int numPayloadsSeen, float currentScore, float currentPayloadScore) {if (numPayloadsSeen == 0) {return currentPayloadScore;} else {return Math.min(currentPayloadScore, currentScore);}}\n"
  },
  {
    "id": "2103",
    "code1": "public ShortBuffer asReadOnlyBuffer() {return duplicate();}\n",
    "code2": "public UpdateDataSourcePermissionsResult updateDataSourcePermissions(UpdateDataSourcePermissionsRequest request) {request = beforeClientExecution(request);return executeUpdateDataSourcePermissions(request);}\n"
  },
  {
    "id": "2104",
    "code1": "public boolean hasPrevious() {return link != list.voidLink;}\n",
    "code2": "public DeleteHsmConfigurationResult deleteHsmConfiguration(DeleteHsmConfigurationRequest request) {request = beforeClientExecution(request);return executeDeleteHsmConfiguration(request);}\n"
  },
  {
    "id": "2105",
    "code1": "public FilterOutputStream(OutputStream out) {this.out = out;}\n",
    "code2": "public ScaleClusterRequest() {super(\"CS\", \"2015-12-15\", \"ScaleCluster\", \"csk\");setUriPattern(\"/clusters/[ClusterId]\");setMethod(MethodType.PUT);}\n"
  },
  {
    "id": "2106",
    "code1": "public boolean isExpectedToken(int symbol) {ATN atn = getInterpreter().atn;ParserRuleContext ctx = _ctx;ATNState s = atn.states.get(getState());IntervalSet following = atn.nextTokens(s);if (following.contains(symbol)) {return true;}if ( !following.contains(Token.EPSILON) ) return false;while ( ctx!=null && ctx.invokingState>=0 && following.contains(Token.EPSILON) ) {ATNState invokingState = atn.states.get(ctx.invokingState);RuleTransition rt = (RuleTransition)invokingState.transition(0);following = atn.nextTokens(rt.followState);if (following.contains(symbol)) {return true;}ctx = (ParserRuleContext)ctx.parent;}if ( following.contains(Token.EPSILON) && symbol == Token.EOF ) {return true;}return false;}\n",
    "code2": "public UpdateStreamResult updateStream(UpdateStreamRequest request) {request = beforeClientExecution(request);return executeUpdateStream(request);}\n"
  },
  {
    "id": "2107",
    "code1": "public EnableAlarmActionsResult enableAlarmActions(EnableAlarmActionsRequest request) {request = beforeClientExecution(request);return executeEnableAlarmActions(request);}\n",
    "code2": "public Builder() {this(true);}\n"
  },
  {
    "id": "2108",
    "code1": "public boolean isSuccessful() {if (mergeResult != null)return mergeResult.getMergeStatus().isSuccessful();else if (rebaseResult != null)return rebaseResult.getStatus().isSuccessful();return true;}\n",
    "code2": "public void setBytesValue(byte[] value) {setBytesValue(new BytesRef(value));}\n"
  },
  {
    "id": "2109",
    "code1": "public SpanQuery makeSpanClause() {SpanQuery [] spanQueries = new SpanQuery[size()];Iterator<SpanQuery> sqi = weightBySpanQuery.keySet().iterator();int i = 0;while (sqi.hasNext()) {SpanQuery sq = sqi.next();float boost = weightBySpanQuery.get(sq);if (boost != 1f) {sq = new SpanBoostQuery(sq, boost);}spanQueries[i++] = sq;}if (spanQueries.length == 1)return spanQueries[0];elsereturn new SpanOrQuery(spanQueries);}\n",
    "code2": "public StashCreateCommand stashCreate() {return new StashCreateCommand(repo);}\n"
  },
  {
    "id": "2110",
    "code1": "public int getPackedGitWindowSize() {return packedGitWindowSize;}\n",
    "code2": "public PutMetricDataResult putMetricData(PutMetricDataRequest request) {request = beforeClientExecution(request);return executePutMetricData(request);}\n"
  },
  {
    "id": "2111",
    "code1": "public String getClassName() {return className;}\n",
    "code2": "public synchronized DirectoryReader getIndexReader() {if (indexReader != null) {indexReader.incRef();}return indexReader;}\n"
  },
  {
    "id": "2112",
    "code1": "public int compareTo(ScoreTerm other) {if (this.boost == other.boost)return other.bytes.get().compareTo(this.bytes.get());elsereturn Float.compare(this.boost, other.boost);}\n",
    "code2": "public int normalize(char s[], int len) {for (int i = 0; i < len; i++) {switch (s[i]) {case FARSI_YEH:case YEH_BARREE:s[i] = YEH;break;case KEHEH:s[i] = KAF;break;case HEH_YEH:case HEH_GOAL:s[i] = HEH;break;case HAMZA_ABOVE: len = delete(s, i, len);i--;break;default:break;}}return len;}\n"
  },
  {
    "id": "2113",
    "code1": "public AuthorizeSecurityGroupIngressResult authorizeSecurityGroupIngress(AuthorizeSecurityGroupIngressRequest request) {request = beforeClientExecution(request);return executeAuthorizeSecurityGroupIngress(request);}\n",
    "code2": "public void addFile(String file) {checkFileNames(Collections.singleton(file));setFiles.add(namedForThisSegment(file));}\n"
  },
  {
    "id": "2114",
    "code1": "public TokenFilter create(TokenStream input) {CommonGramsFilter commonGrams = (CommonGramsFilter) super.create(input);return new CommonGramsQueryFilter(commonGrams);}\n",
    "code2": "public String getPath() {return path;}\n"
  },
  {
    "id": "2115",
    "code1": "public GetQueueAttributesRequest(String queueUrl, java.util.List<String> attributeNames) {setQueueUrl(queueUrl);setAttributeNames(attributeNames);}\n",
    "code2": "public static boolean[] copyOf(boolean[] original, int newLength) {if (newLength < 0) {throw new NegativeArraySizeException();}return copyOfRange(original, 0, newLength);}\n"
  },
  {
    "id": "2116",
    "code1": "public ListDominantLanguageDetectionJobsResult listDominantLanguageDetectionJobs(ListDominantLanguageDetectionJobsRequest request) {request = beforeClientExecution(request);return executeListDominantLanguageDetectionJobs(request);}\n",
    "code2": "public String toString() {return \"slice start=\" + start + \" length=\" + length + \" readerIndex=\" + readerIndex;}\n"
  },
  {
    "id": "2117",
    "code1": "public SquashMessageFormatter() {dateFormatter = new GitDateFormatter(Format.DEFAULT);}\n",
    "code2": "public GetVideoCoverRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"GetVideoCover\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}\n"
  },
  {
    "id": "2118",
    "code1": "public GetHostedZoneLimitResult getHostedZoneLimit(GetHostedZoneLimitRequest request) {request = beforeClientExecution(request);return executeGetHostedZoneLimit(request);}\n",
    "code2": "public void set(int index, long value) {final int o = index >>> 6;final int b = index & 63;final int shift = b << 0;blocks[o] = (blocks[o] & ~(1L << shift)) | (value << shift);}\n"
  },
  {
    "id": "2119",
    "code1": "public ModifyAccountResult modifyAccount(ModifyAccountRequest request) {request = beforeClientExecution(request);return executeModifyAccount(request);}\n",
    "code2": "public Token LT(int k) {lazyInit();if ( k==0 ) return null;if ( k < 0 ) return LB(-k);int i = p + k - 1;sync(i);if ( i >= tokens.size() ) { return tokens.get(tokens.size()-1);}return tokens.get(i);}\n"
  },
  {
    "id": "2120",
    "code1": "public StopKeyPhrasesDetectionJobResult stopKeyPhrasesDetectionJob(StopKeyPhrasesDetectionJobRequest request) {request = beforeClientExecution(request);return executeStopKeyPhrasesDetectionJob(request);}\n",
    "code2": "public String toString() {return \"[Array Formula or Shared Formula]\\n\" + \"row = \" + getRow() + \"\\n\" + \"col = \" + getColumn() + \"\\n\";}\n"
  },
  {
    "id": "2121",
    "code1": "public static boolean isValidSchemeChar(int index, char c) {if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {return true;}if (index > 0 && ((c >= '0' && c <= '9') || c == '+' || c == '-' || c == '.')) {return true;}return false;}\n",
    "code2": "public ListAppliedSchemaArnsResult listAppliedSchemaArns(ListAppliedSchemaArnsRequest request) {request = beforeClientExecution(request);return executeListAppliedSchemaArns(request);}\n"
  },
  {
    "id": "2122",
    "code1": "public GetContactMethodsResult getContactMethods(GetContactMethodsRequest request) {request = beforeClientExecution(request);return executeGetContactMethods(request);}\n",
    "code2": "public static short lookupIndexByName(String name) {FunctionMetadata fd = getInstance().getFunctionByNameInternal(name);if (fd == null) {fd = getInstanceCetab().getFunctionByNameInternal(name);if (fd == null) {return -1;}}return (short) fd.getIndex();}\n"
  },
  {
    "id": "2123",
    "code1": "public static int getEffectivePort(String scheme, int specifiedPort) {if (specifiedPort != -1) {return specifiedPort;}if (\"http\".equalsIgnoreCase(scheme)) {return 80;} else if (\"https\".equalsIgnoreCase(scheme)) {return 443;} else {return -1;}}\n",
    "code2": "public ListAssessmentTemplatesResult listAssessmentTemplates(ListAssessmentTemplatesRequest request) {request = beforeClientExecution(request);return executeListAssessmentTemplates(request);}\n"
  },
  {
    "id": "2124",
    "code1": "public ShortBuffer slice() {return new ReadWriteShortArrayBuffer(remaining(), backingArray, offset + position);}\n",
    "code2": "public void set(int index, long n) {if (count < index)throw new ArrayIndexOutOfBoundsException(index);else if (count == index)add(n);elseentries[index] = n;}\n"
  },
  {
    "id": "2125",
    "code1": "public RevFlagSet(Collection<RevFlag> s) {this();addAll(s);}\n",
    "code2": "public int size() {return size;}\n"
  },
  {
    "id": "2126",
    "code1": "public long length() {return inCoreLength();}\n",
    "code2": "public void setValue(boolean newValue) {value = newValue;}\n"
  },
  {
    "id": "2127",
    "code1": "public final short get(int index) {checkIndex(index);return backingArray[offset + index];}\n",
    "code2": "public String toString(){return image;}\n"
  },
  {
    "id": "2128",
    "code1": "public UpdateRepoWebhookRequest() {super(\"cr\", \"2016-06-07\", \"UpdateRepoWebhook\", \"cr\");setUriPattern(\"/repos/[RepoNamespace]/[RepoName]/webhooks/[WebhookId]\");setMethod(MethodType.POST);}\n",
    "code2": "public DeleteAttributesRequest(String domainName, String itemName, java.util.List<Attribute> attributes, UpdateCondition expected) {setDomainName(domainName);setItemName(itemName);setAttributes(attributes);setExpected(expected);}\n"
  },
  {
    "id": "2129",
    "code1": "public Change(ChangeAction action, ResourceRecordSet resourceRecordSet) {setAction(action.toString());setResourceRecordSet(resourceRecordSet);}\n",
    "code2": "public DeleteImageResult deleteImage(DeleteImageRequest request) {request = beforeClientExecution(request);return executeDeleteImage(request);}\n"
  },
  {
    "id": "2130",
    "code1": "public void reset() {if (!first())reset(raw);}\n",
    "code2": "public final CharsetDecoder reset() {status = INIT;implReset();return this;}\n"
  },
  {
    "id": "2131",
    "code1": "public UpdateRuleVersionResult updateRuleVersion(UpdateRuleVersionRequest request) {request = beforeClientExecution(request);return executeUpdateRuleVersion(request);}\n",
    "code2": "public ListVoiceConnectorTerminationCredentialsResult listVoiceConnectorTerminationCredentials(ListVoiceConnectorTerminationCredentialsRequest request) {request = beforeClientExecution(request);return executeListVoiceConnectorTerminationCredentials(request);}\n"
  },
  {
    "id": "2132",
    "code1": "public DescribeTransitGatewayVpcAttachmentsResult describeTransitGatewayVpcAttachments(DescribeTransitGatewayVpcAttachmentsRequest request) {request = beforeClientExecution(request);return executeDescribeTransitGatewayVpcAttachments(request);}\n",
    "code2": "public PutVoiceConnectorStreamingConfigurationResult putVoiceConnectorStreamingConfiguration(PutVoiceConnectorStreamingConfigurationRequest request) {request = beforeClientExecution(request);return executePutVoiceConnectorStreamingConfiguration(request);}\n"
  },
  {
    "id": "2133",
    "code1": "public MergeShardsResult mergeShards(MergeShardsRequest request) {request = beforeClientExecution(request);return executeMergeShards(request);}\n",
    "code2": "public AllocateHostedConnectionResult allocateHostedConnection(AllocateHostedConnectionRequest request) {request = beforeClientExecution(request);return executeAllocateHostedConnection(request);}\n"
  },
  {
    "id": "2134",
    "code1": "public void reset() {if (!first()) {ptr = 0;nextSubtree = 0;currentSubtree = null;currentSubtree = null;if (!eof())parseEntry();}}\n",
    "code2": "public void reset() {if (!first()) {ptr = 0;if (!eof())parseEntry();}}\n"
  },
  {
    "id": "2135",
    "code1": "public void addFile(String file) {checkFileNames(new[] { file });setFiles.add(file);}\n",
    "code2": "public void addFile(String file) {checkFileNames(Collections.singleton(file));setFiles.add(namedForThisSegment(file));}\n"
  },
  {
    "id": "2136",
    "code1": "public GetDomainSuggestionsResult getDomainSuggestions(GetDomainSuggestionsRequest request) {request = beforeClientExecution(request);return executeGetDomainSuggestions(request);}\n",
    "code2": "public DescribeStackEventsResult describeStackEvents(DescribeStackEventsRequest request) {request = beforeClientExecution(request);return executeDescribeStackEvents(request);}\n"
  },
  {
    "id": "2137",
    "code1": "public RevCommit tryFastForward(RevCommit newCommit) throws IOException {Ref head = repo.getRef(Constants.HEAD);if (head == null || head.getObjectId() == null) {throw new RefNotFoundException(MessageFormat.format(JGitText.get().refNotResolved,HEAD));}ObjectId headId = head.getObjectId();if (headId == null) {throw new RefNotFoundException(MessageFormat.format(JGitText.get().refNotResolved,HEAD));}final RevCommit headCommit = walk.lookupCommit(headId);if (walk.isMergedInto(newCommit,headCommit, headCommit)) {return newCommit;}String headName;if (head.isSymbolic()) {headName = head.getTarget().getName();} else {headName = \"detached HEAD\";}return tryFastForward(headName, headCommit, newCommit);}\n",
    "code2": "public RevCommit tryFastForward(RevCommit newCommit) throws IOException,GitAPIException {Ref head = getHead();ObjectId headId = head.getObjectId();if (headId == null)throw new RefNotFoundException(MessageFormat.format(JGitText.get().refNotResolved, Constants.HEAD));RevCommit headCommit = walk.lookupCommit(headId);if (walk.isMergedInto(newCommit, headCommit))return newCommit;String headName = getHeadName(head);return tryFastForward(headName, headCommit, newCommit);}\n"
  },
  {
    "id": "2138",
    "code1": "public CreateExportJobResult createExportJob(CreateExportJobRequest request) {request = beforeClientExecution(request);return executeCreateExportJob(request);}\n",
    "code2": "public CreateDedicatedIpPoolResult createDedicatedIpPool(CreateDedicatedIpPoolRequest request) {request = beforeClientExecution(request);return executeCreateDedicatedIpPool(request);}\n"
  },
  {
    "id": "2139",
    "code1": "public boolean equals(Object other) {assert exists || equalsEquals(other);if (other instanceof MergedGroup) {if (other instanceof MergedGroup == null) {return otherMergedGroup == null;} else {return groupValueIsValueType ? JCG.EqualityCompare(groupValue, otherMergedGroup.groupValue);}} else {return false;}}\n",
    "code2": "public boolean equals(Object _other) {assert neverEquals(_other);if (_other instanceof MergedGroup) {MergedGroup<?> other = (MergedGroup<?>) _other;if (groupValue == null) {return other == null;} else {return groupValue.equals(other);}} else {return false;}}\n"
  },
  {
    "id": "2140",
    "code1": "public long getObjectSize(AnyObjectId objectId, int typeHint) {long sz = db.getObjectSize(this, objectId);if (sz < 0) {if (typeHint == OBJ_ANY) {throw new MissingObjectException(objectId.copy(),objectId.copy(), \"unknown\");}throw new MissingObjectException(objectId.copy(), typeHint);}return sz;}\n",
    "code2": "public long getObjectSize(AnyObjectId objectId, int typeHint)throws MissingObjectException, IncorrectObjectTypeException,IOException {long sz = db.getObjectSize(this, objectId);if (sz < 0) {if (typeHint == OBJ_ANY)throw new MissingObjectException(objectId.copy(),JGitText.get().unknownObjectType2);throw new MissingObjectException(objectId.copy(), typeHint);}return sz;}\n"
  },
  {
    "id": "2141",
    "code1": "public static final int parseHexInt4(byte token) throws IOException {final s byte r = gets16[digit];if (r < 0) {throw new IndexOutOfBoundsException();}return r;}\n",
    "code2": "public static final int parseHexInt4(final byte digit) {final byte r = digits16[digit];if (r < 0)throw new ArrayIndexOutOfBoundsException();return r;}\n"
  },
  {
    "id": "2142",
    "code1": "public Ref peel(Ref ref) {try {return refDatabase.peel(ref);} catch (IOException e) {throw new IOException(e);}}\n",
    "code2": "public Ref peel(Ref ref) {try {return getRefDatabase().peel(ref);} catch (IOException e) {return ref;}}\n"
  },
  {
    "id": "2143",
    "code1": "public FileBasedConfig(Config base, File cfgLocation, FS fs) {super(base);configFile = cfgLocation;this.fs = fs;this.snapshot = FileSnapshot.DIR;}\n",
    "code2": "public FileBasedConfig(Config base, File cfgLocation, FS fs) {super(base);configFile = cfgLocation;this.fs = fs;this.snapshot = FileSnapshot.DIRTY;this.hash = ObjectId.zeroId();}\n"
  },
  {
    "id": "2144",
    "code1": "public void add(char[] output, int offset, int len, int endOffset, int posLength) {if (count == outputs.length) {CharsRef[] next = new CharsRef[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];System.arraycopy(outputs, 0, next, 0, count);outputs = next;}if (count == endOffsets.length) {int[] next = new int[ArrayUtil.oversize(1+count, Integer.BYTES)];System.arraycopy(endOffsets, 0, next, 0, count);endOffsets = next;}if (count == posLengths.length) {int[] next = new int[ArrayUtil.oversize(1+count, Integer.BYTES)];System.arraycopy(posLengths, 0, next, 0, count);posLengths = next;}if (outputs[count] == null) {return;}if (outputs[count] == null) {return pos;}}\n",
    "code2": "public void add(char[] output, int offset, int len, int endOffset, int posLength) {if (count == outputs.length) {outputs = ArrayUtil.grow(outputs, count+1);}if (count == endOffsets.length) {final int[] next = new int[ArrayUtil.oversize(1+count, Integer.BYTES)];System.arraycopy(endOffsets, 0, next, 0, count);endOffsets = next;}if (count == posLengths.length) {final int[] next = new int[ArrayUtil.oversize(1+count, Integer.BYTES)];System.arraycopy(posLengths, 0, next, 0, count);posLengths = next;}if (outputs[count] == null) {outputs[count] = new CharsRefBuilder();}outputs[count].copyChars(output, offset, len);endOffsets[count] = endOffset;posLengths[count] = posLength;count++;}\n"
  },
  {
    "id": "2145",
    "code1": "public static double[] grow(double[] array) {return grow(array, 1 + array.length);}\n",
    "code2": "public static long[] grow(long[] array) {return grow(array, 1 + array.length);}\n"
  },
  {
    "id": "2146",
    "code1": "public boolean equals(Object obj) {if (this == obj) return true;if (obj == null) return false;if (obj instanceof HSSFCellStyle) {HSSFCellStyle other = (HSSFCellStyle) obj;if (_format == null) {if (other._format != null)return false;} else if (!_format.equals(other.format))return false;if (index != other.index)return false;return true;}\n",
    "code2": "public boolean equals(Object obj) {if (this == obj) {return true;}if (obj == null) {return false;}if (obj instanceof HSSFCellStyle) {final HSSFCellStyle other = (HSSFCellStyle) obj;if (_format == null) {if (other._format != null) {return false;}} else if (!_format.equals(other._format)) {return false;}if (_index != other._index) {return false;}return true;}return false;}\n"
  },
  {
    "id": "2147",
    "code1": "public String toString() {StringBuilder b = new StringBuilder();b.append(\"[DELTA]\\n\");b.append(\"    .firstrow        = \").append(firstRow).append(\"\\n\");b.append(\"    .lastrow       = \").append(lastRow).append(\"\\n\");b.append(\"    .firstcol         = \").append(firstCol).append(\"\\n\");b.append(\"    .lastcol    = \").append(lastCol).append(\"\\n\");b.append(\"    .charCount       = \").append(charCount).append(\"\\n\");b.append(\"    .charType        = \").append(getCharType()).append(\"\\n\");b.append(\"    .read     = \").append(getReadablePath()).append(\"\\n\");b.append(\"[/COLINFO]\\n\");return b.toString();}\n",
    "code2": "public String toString(){StringBuilder b = new StringBuilder();b.append(\"[DCONREF]\\n\");b.append(\"    .ref\\n\");b.append(\"        .firstrow   = \").append(firstRow).append(\"\\n\");b.append(\"        .lastrow    = \").append(lastRow).append(\"\\n\");b.append(\"        .firstcol   = \").append(firstCol).append(\"\\n\");b.append(\"        .lastcol    = \").append(lastCol).append(\"\\n\");b.append(\"    .cch            = \").append(charCount).append(\"\\n\");b.append(\"    .stFile\\n\");b.append(\"        .h          = \").append(charType).append(\"\\n\");b.append(\"        .rgb        = \").append(getReadablePath()).append(\"\\n\");b.append(\"[/DCONREF]\\n\");return b.toString();}\n"
  },
  {
    "id": "2148",
    "code1": "public boolean incrementToken() {return false;}\n",
    "code2": "public final boolean incrementToken() {return false;}\n"
  },
  {
    "id": "2149",
    "code1": "public String toString(){StringBuilder buffer = new StringBuilder();buffer.append(\"[SERIESLIST]\\n\");buffer.append(\"    .seriesNumbers = \").append(\" (\").append( getSeriesNumbers()).append(\" )\");buffer.append(System.getProperty(\"line.separator\"));buffer.append(\"[/SERIESLIST]\\n\");return buffer.toString();}\n",
    "code2": "public String toString() {StringBuilder buffer = new StringBuilder();buffer.append(\"[SERIESLIST]\\n\");buffer.append(\"    .seriesNumbers= \").append(\" (\").append( Arrays.toString(getSeriesNumbers()) ).append(\" )\");buffer.append(\"\\n\");buffer.append(\"[/SERIESLIST]\\n\");return buffer.toString();}\n"
  },
  {
    "id": "2150",
    "code1": "public boolean exists() {return objects.exists();}\n",
    "code2": "public boolean exists() {return fs.exists(objects);}\n"
  },
  {
    "id": "2151",
    "code1": "public DomainDetail describeDomain(DescribeDomainRequest request) {request = beforeClientExecution(request);return executeDescribeDomain(request);}\n",
    "code2": "public DescribeDomainResult describeDomain(DescribeDomainRequest request) {request = beforeClientExecution(request);return executeDescribeDomain(request);}\n"
  },
  {
    "id": "2152",
    "code1": "public String toString() {StringBuilder r = new StringBuilder();r.append(\"ResultPath\");r.append(getResultPath());return r.toString();}\n",
    "code2": "public String toString() {StringBuilder r = new StringBuilder();r.append(\"BlameResult: \"); r.append(getResultPath());return r.toString();}\n"
  },
  {
    "id": "2153",
    "code1": "public TreeFilter clone() {return new Binary(a.clone(), b.clone());}\n",
    "code2": "public RevFilter clone() {return new Binary(a.clone(), b.clone());}\n"
  },
  {
    "id": "2154",
    "code1": "public void serialize(LittleEndianOutput out) {out.writeShort(field_1_number_crn_records);out.writeShort(short)field_2_sheet_table_index);}\n",
    "code2": "public void serialize(LittleEndianOutput out) {out.writeShort((short)field_1_number_crn_records);out.writeShort((short)field_2_sheet_table_index);}\n"
  },
  {
    "id": "2155",
    "code1": "public boolean find(int start) {findPos = start;if (findPos < regionStart) {findPos = regionStart;} else {if (findPos >= regionEnd) {matchFound = false;return matchFound = findImpl(address, findPos, matchOffsets);if (matchFound) {findPos = matchOffsets[1];}return matchFound;}\n",
    "code2": "public boolean find(int start) {findPos = start;if (findPos < regionStart) {findPos = regionStart;} else if (findPos >= regionEnd) {matchFound = false;return false;}matchFound = findImpl(address, input, findPos, matchOffsets);if (matchFound) {findPos = matchOffsets[1];}return matchFound;}\n"
  },
  {
    "id": "2156",
    "code1": "public synchronized void setMultiValued(String dimName, boolean v) {DimConfig ft = fieldTypes.get(dimName);if (ft == null) {ft = new DimConfig();fieldTypes.put(dimName, ft);}ft.setMultiValued(v);}\n",
    "code2": "public synchronized void setMultiValued(String dimName, boolean v) {DimConfig ft = fieldTypes.get(dimName);if (ft == null) {ft = new DimConfig();fieldTypes.put(dimName, ft);}ft.multiValued = v;}\n"
  },
  {
    "id": "2157",
    "code1": "public CharSequence toQueryString(EscapeQuerySyntax escaper) {if (isDefaultField(this.field)) {return \"\\\"\"+ getTermEscapeQuoted(escaper) + \"\\\"\";} else {return this.field + \":\" + getTermEscapeQuoted(escaper) + \"\\\"\";}}\n",
    "code2": "public CharSequence toQueryString(EscapeQuerySyntax escaper) {if (isDefaultField(this.field)) {return \"\\\"\" + getTermEscapeQuoted(escaper) + \"\\\"\";} else {return this.field + \":\" + \"\\\"\" + getTermEscapeQuoted(escaper) + \"\\\"\";}}\n"
  },
  {
    "id": "2158",
    "code1": "public final String getFullMessage() {final byte[] raw = buffer;int msgB = RawParseUtils.tagMessage(raw, 0);if (msgB < 0) {return \"\"; }return RawParseUtils.decode(guessEncoding(), raw, msgB, raw.length);}\n",
    "code2": "public final String getFullMessage() {byte[] raw = buffer;int msgB = RawParseUtils.tagMessage(raw, 0);if (msgB < 0) {return \"\"; }return RawParseUtils.decode(guessEncoding(), raw, msgB, raw.length);}\n"
  },
  {
    "id": "2159",
    "code1": "public AttributeDefinition(String attributeName, ScalAttributeType attributeType) {setAttributeName(attributeName);setAttributeType(attributeType.toString());}\n",
    "code2": "public AttributeDefinition(String attributeName, ScalarAttributeType attributeType) {setAttributeName(attributeName);setAttributeType(attributeType.toString());}\n"
  },
  {
    "id": "2160",
    "code1": "public HashMap(int capacity, float loadFactor) {this(capacity);if (loadFactor <= 0 || float.isNaN(loadFactor)) {throw new IllegalArgumentException(\"Load factor: \" + loadFactor);}}\n",
    "code2": "public HashMap(int capacity, float loadFactor) {this(capacity);if (loadFactor <= 0 || Float.isNaN(loadFactor)) {throw new IllegalArgumentException(\"Load factor: \" + loadFactor);}}\n"
  },
  {
    "id": "2161",
    "code1": "public DeleteAttributesRequest(String domainName, String itemName, java.util.List<Attribute> attributes, UpdateCondition expected) {setDomainName(domainName);setItemName(itemName);setAttributes(attributes);setExpected(expected);}\n",
    "code2": "public DeleteAttributesRequest(String domainName, String itemName, java.util.List<Attribute> attributes, UpdateCondition expected) {setDomainName(domainName);setItemName(itemName);setAttributes(attributes);setExpected(expected);}\n"
  },
  {
    "id": "2162",
    "code1": "public ListBonusPaymentsResult listBonusPayments(ListBonusPaymentsRequest request) {request = beforeClientExecution(request);return executeListBonusPayments(request);}\n",
    "code2": "public ListBonusPaymentsResult listBonusPayments(ListBonusPaymentsRequest request) {request = beforeClientExecution(request);return executeListBonusPayments(request);}\n"
  },
  {
    "id": "2163",
    "code1": "public synchronized DirectoryReader getIndexReader() {if (indexReader != null) {indexReader.incRef();}return indexReader;}\n",
    "code2": "public synchronized DirectoryReader getIndexReader() {if (indexReader != null) {indexReader.incRef();}return indexReader;}\n"
  },
  {
    "id": "2164",
    "code1": "public UpdateConfigurationSetSendingEnabledResult updateConfigurationSetSendingEnabled(UpdateConfigurationSetSendingEnabledRequest request) {request = beforeClientExecution(request);return executeUpdateConfigurationSetSendingEnabled(request);}\n",
    "code2": "public UpdateConfigurationSetSendingEnabledResult updateConfigurationSetSendingEnabled(UpdateConfigurationSetSendingEnabledRequest request) {request = beforeClientExecution(request);return executeUpdateConfigurationSetSendingEnabled(request);}\n"
  },
  {
    "id": "2165",
    "code1": "public GetContactAttributesResult getContactAttributes(GetContactAttributesRequest request) {request = beforeClientExecution(request);return executeGetContactAttributes(request);}\n",
    "code2": "public GetContactAttributesResult getContactAttributes(GetContactAttributesRequest request) {request = beforeClientExecution(request);return executeGetContactAttributes(request);}\n"
  },
  {
    "id": "2166",
    "code1": "public ListIngestionsResult listIngestions(ListIngestionsRequest request) {request = beforeClientExecution(request);return executeListIngestions(request);}\n",
    "code2": "public ListIngestionsResult listIngestions(ListIngestionsRequest request) {request = beforeClientExecution(request);return executeListIngestions(request);}\n"
  },
  {
    "id": "2167",
    "code1": "public GetDomainSuggestionsResult getDomainSuggestions(GetDomainSuggestionsRequest request) {request = beforeClientExecution(request);return executeGetDomainSuggestions(request);}\n",
    "code2": "public GetDomainSuggestionsResult getDomainSuggestions(GetDomainSuggestionsRequest request) {request = beforeClientExecution(request);return executeGetDomainSuggestions(request);}\n"
  },
  {
    "id": "2168",
    "code1": "public InitiateJobRequest(String accountId, String vaultName, JobParameters jobParameters) {setAccountId(accountId);setVaultName(vaultName);setJobParameters(jobParameters);}\n",
    "code2": "public InitiateJobRequest(String accountId, String vaultName, JobParameters jobParameters) {setAccountId(accountId);setVaultName(vaultName);setJobParameters(jobParameters);}\n"
  },
  {
    "id": "2169",
    "code1": "public IntBuffer put(int[] src, int srcOffset, int intCount) {Arrays.checkOffsetAndCount(src.length, srcOffset, intCount);if (intCount > remaining()) {throw new BufferOverflowException();}for (int i = srcOffset; i < srcOffset + intCount; ++i) {put(src[i]);}return this;}\n",
    "code2": "public IntBuffer put(int[] src, int srcOffset, int intCount) {Arrays.checkOffsetAndCount(src.length, srcOffset, intCount);if (intCount > remaining()) {throw new BufferOverflowException();}for (int i = srcOffset; i < srcOffset + intCount; ++i) {put(src[i]);}return this;}\n"
  },
  {
    "id": "2170",
    "code1": "public EscherOptRecord getOptRecord() {return _optRecord;}\n",
    "code2": "public EscherOptRecord getOptRecord() {return _optRecord;}\n"
  },
  {
    "id": "2171",
    "code1": "public CreateVpnConnectionResult createVpnConnection(CreateVpnConnectionRequest request) {request = beforeClientExecution(request);return executeCreateVpnConnection(request);}\n",
    "code2": "public CreateVpnConnectionResult createVpnConnection(CreateVpnConnectionRequest request) {request = beforeClientExecution(request);return executeCreateVpnConnection(request);}\n"
  },
  {
    "id": "2172",
    "code1": "public String getClassName() {return className;}\n",
    "code2": "public String getClassName() {return className;}\n"
  },
  {
    "id": "2173",
    "code1": "public boolean isDirect() {return false;}\n",
    "code2": "public boolean isDirect() {return false;}\n"
  },
  {
    "id": "2174",
    "code1": "public StreamIDRecord(RecordInputStream in) {idstm = in.readShort();}\n",
    "code2": "public StreamIDRecord(RecordInputStream in) {idstm = in.readShort();}\n"
  },
  {
    "id": "2175",
    "code1": "public DescribeByoipCidrsResult describeByoipCidrs(DescribeByoipCidrsRequest request) {request = beforeClientExecution(request);return executeDescribeByoipCidrs(request);}\n",
    "code2": "public DescribeByoipCidrsResult describeByoipCidrs(DescribeByoipCidrsRequest request) {request = beforeClientExecution(request);return executeDescribeByoipCidrs(request);}\n"
  },
  {
    "id": "2176",
    "code1": "public void set(int index, long n) {if (count < index)throw new ArrayIndexOutOfBoundsException(index);else if (count == index)add(n);elseentries[index] = n;}\n",
    "code2": "public void set(int index, long n) {if (count < index)throw new ArrayIndexOutOfBoundsException(index);else if (count == index)add(n);elseentries[index] = n;}\n"
  },
  {
    "id": "2177",
    "code1": "public DrawingRecord() {recordData = EMPTY_BYTE_ARRAY;}\n",
    "code2": "public DrawingRecord() {recordData = EMPTY_BYTE_ARRAY;}\n"
  },
  {
    "id": "2178",
    "code1": "public RebaseResult getRebaseResult() {return this.rebaseResult;}\n",
    "code2": "public RebaseResult getRebaseResult() {return this.rebaseResult;}\n"
  },
  {
    "id": "2179",
    "code1": "public RebootNodeResult rebootNode(RebootNodeRequest request) {request = beforeClientExecution(request);return executeRebootNode(request);}\n",
    "code2": "public RebootNodeResult rebootNode(RebootNodeRequest request) {request = beforeClientExecution(request);return executeRebootNode(request);}\n"
  },
  {
    "id": "2180",
    "code1": "public UpdateDataSourcePermissionsResult updateDataSourcePermissions(UpdateDataSourcePermissionsRequest request) {request = beforeClientExecution(request);return executeUpdateDataSourcePermissions(request);}\n",
    "code2": "public UpdateDataSourcePermissionsResult updateDataSourcePermissions(UpdateDataSourcePermissionsRequest request) {request = beforeClientExecution(request);return executeUpdateDataSourcePermissions(request);}\n"
  },
  {
    "id": "2181",
    "code1": "public DeleteGroupPolicyRequest(String groupName, String policyName) {setGroupName(groupName);setPolicyName(policyName);}\n",
    "code2": "public DeleteGroupPolicyRequest(String groupName, String policyName) {setGroupName(groupName);setPolicyName(policyName);}\n"
  },
  {
    "id": "2182",
    "code1": "public GetLaunchTemplateDataResult getLaunchTemplateData(GetLaunchTemplateDataRequest request) {request = beforeClientExecution(request);return executeGetLaunchTemplateData(request);}\n",
    "code2": "public GetLaunchTemplateDataResult getLaunchTemplateData(GetLaunchTemplateDataRequest request) {request = beforeClientExecution(request);return executeGetLaunchTemplateData(request);}\n"
  },
  {
    "id": "2183",
    "code1": "public ShortBuffer asReadOnlyBuffer() {return duplicate();}\n",
    "code2": "public ShortBuffer asReadOnlyBuffer() {return duplicate();}\n"
  },
  {
    "id": "2184",
    "code1": "public GetDeploymentTargetResult getDeploymentTarget(GetDeploymentTargetRequest request) {request = beforeClientExecution(request);return executeGetDeploymentTarget(request);}\n",
    "code2": "public GetDeploymentTargetResult getDeploymentTarget(GetDeploymentTargetRequest request) {request = beforeClientExecution(request);return executeGetDeploymentTarget(request);}\n"
  },
  {
    "id": "2185",
    "code1": "public IntBuffer put(int[] src, int srcOffset, int intCount) {Arrays.checkOffsetAndCount(src.length, srcOffset, intCount);if (intCount > remaining()) {throw new BufferOverflowException();}for (int i = srcOffset; i < srcOffset + intCount; ++i) {put(src[i]);}return this;}\n",
    "code2": "public IntBuffer put(int[] src, int srcOffset, int intCount) {Arrays.checkOffsetAndCount(src.length, srcOffset, intCount);if (intCount > remaining()) {throw new BufferOverflowException();}for (int i = srcOffset; i < srcOffset + intCount; ++i) {put(src[i]);}return this;}\n"
  },
  {
    "id": "2186",
    "code1": "public DeleteAccessControlRuleResult deleteAccessControlRule(DeleteAccessControlRuleRequest request) {request = beforeClientExecution(request);return executeDeleteAccessControlRule(request);}\n",
    "code2": "public DeleteAccessControlRuleResult deleteAccessControlRule(DeleteAccessControlRuleRequest request) {request = beforeClientExecution(request);return executeDeleteAccessControlRule(request);}\n"
  },
  {
    "id": "2187",
    "code1": "public CreateGatewayGroupResult createGatewayGroup(CreateGatewayGroupRequest request) {request = beforeClientExecution(request);return executeCreateGatewayGroup(request);}\n",
    "code2": "public CreateGatewayGroupResult createGatewayGroup(CreateGatewayGroupRequest request) {request = beforeClientExecution(request);return executeCreateGatewayGroup(request);}\n"
  },
  {
    "id": "2188",
    "code1": "public RenameFaceRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"RenameFace\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}\n",
    "code2": "public RenameFaceRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"RenameFace\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}\n"
  },
  {
    "id": "2189",
    "code1": "public PutMetricDataResult putMetricData(PutMetricDataRequest request) {request = beforeClientExecution(request);return executePutMetricData(request);}\n",
    "code2": "public PutMetricDataResult putMetricData(PutMetricDataRequest request) {request = beforeClientExecution(request);return executePutMetricData(request);}\n"
  },
  {
    "id": "2190",
    "code1": "public ObjectId getPeeledObjectId() {return getLeaf().getPeeledObjectId();}\n",
    "code2": "public ObjectId getPeeledObjectId() {return getLeaf().getPeeledObjectId();}\n"
  },
  {
    "id": "2191",
    "code1": "@Override public boolean equals(Object object) {return c.equals(object);}\n",
    "code2": "@Override public boolean equals(Object object) {return c.equals(object);}\n"
  },
  {
    "id": "2192",
    "code1": "public String getSheetName(int sheetIndex) {return getBoundSheetRec(sheetIndex).getSheetname();}\n",
    "code2": "public String getSheetName(int sheetIndex) {return getBoundSheetRec(sheetIndex).getSheetname();}\n"
  },
  {
    "id": "2193",
    "code1": "public DescribeByoipCidrsResult describeByoipCidrs(DescribeByoipCidrsRequest request) {request = beforeClientExecution(request);return executeDescribeByoipCidrs(request);}\n",
    "code2": "public DescribeByoipCidrsResult describeByoipCidrs(DescribeByoipCidrsRequest request) {request = beforeClientExecution(request);return executeDescribeByoipCidrs(request);}\n"
  },
  {
    "id": "2194",
    "code1": "public SubmoduleUpdateCommand addPath(String path) {paths.add(path);return this;}\n",
    "code2": "public SubmoduleUpdateCommand addPath(String path) {paths.add(path);return this;}\n"
  },
  {
    "id": "2195",
    "code1": "public SetIdentityPoolConfigurationResult setIdentityPoolConfiguration(SetIdentityPoolConfigurationRequest request) {request = beforeClientExecution(request);return executeSetIdentityPoolConfiguration(request);}\n",
    "code2": "public SetIdentityPoolConfigurationResult setIdentityPoolConfiguration(SetIdentityPoolConfigurationRequest request) {request = beforeClientExecution(request);return executeSetIdentityPoolConfiguration(request);}\n"
  },
  {
    "id": "2196",
    "code1": "public DescribeModelPackageResult describeModelPackage(DescribeModelPackageRequest request) {request = beforeClientExecution(request);return executeDescribeModelPackage(request);}\n",
    "code2": "public DescribeModelPackageResult describeModelPackage(DescribeModelPackageRequest request) {request = beforeClientExecution(request);return executeDescribeModelPackage(request);}\n"
  },
  {
    "id": "2197",
    "code1": "public final CharsetDecoder reset() {status = INIT;implReset();return this;}\n",
    "code2": "public final CharsetDecoder reset() {status = INIT;implReset();return this;}\n"
  },
  {
    "id": "2198",
    "code1": "public boolean hasPrevious() {return link != list.voidLink;}\n",
    "code2": "public boolean hasPrevious() {return link != list.voidLink;}\n"
  },
  {
    "id": "2199",
    "code1": "public final ValueEval evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex) {if (args.length != 3) {return ErrorEval.VALUE_INVALID;}return evaluate(srcRowIndex, srcColumnIndex, args[0], args[1], args[2]);}\n",
    "code2": "public final ValueEval evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex) {if (args.length != 3) {return ErrorEval.VALUE_INVALID;}return evaluate(srcRowIndex, srcColumnIndex, args[0], args[1], args[2]);}\n"
  }
]